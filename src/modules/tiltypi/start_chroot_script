#!/usr/bin/env bash
# TiltyPi generation script
# Helper script that runs in a Raspbian chroot to create the TiltyPi distro
# Written by Marcus Young <myoung34@my.apsu.edu>
# Based on buildscripts from OctoPi Written by Guy Sheffer <guysoft at gmail dot com> and Gina Häußge <osd@foosel.net>
# GPL V3
########
set -x
set -e

export LC_ALL=C

source /common.sh

### Script ####

unpack /filesystem/home/pi /home/pi pi
unpack /filesystem/home/root /root root
unpack /filesystem/boot /boot
apt-get update

# in case we are building from a regular raspbian image instead of the lite one...
remove_extra=$(remove_if_installed scratch squeak-plugins-scratch squeak-vm wolfram-engine python-minecraftpi minecraft-pi sonic-pi oracle-java8-jdk bluej libreoffice-common libreoffice-core freepats greenfoot nodered)
echo "removing:" $remove_extra
apt-get remove -y --purge  $remove_extra
apt-get autoremove -y

apt-get -y --force-yes install libbluetooth-dev python3 python3-virtualenv python3-dev git screen subversion cmake checkinstall avahi-daemon libavahi-compat-libdnssd1 libffi-dev libssl-dev

echo " - Reinstall iputils-ping"
apt-get install --reinstall iputils-ping

pushd /home/pi

  # build virtualenv
  sudo -u pi python3 -m virtualenv --python=python3 tilty
  sudo -u pi /home/pi/tilty/bin/pip install --upgrade pip

  # Tilty & pyserial
  if [ "$TILTYPI_INCLUDE_TILTY" == "yes" ]
  then
    echo "--- Installing Tilty"

    # Tilty
    PIP_DEFAULT_TIMEOUT=60 sudo -u pi /home/pi/tilty/bin/pip install tilty
  fi
popd

# store tiltypi commit used to build this image
echo "$TILTYPI_COMMIT" > /etc/tiltypi_commit

# Keep legacy compatibility
ln -s /etc/custompios_buildbase /etc/tiltypi_buildbase

# allow pi user to run shutdown and service commands
echo "pi ALL=NOPASSWD: /sbin/shutdown" > /etc/sudoers.d/tilty-shutdown
echo "pi ALL=NOPASSWD: /usr/sbin/service" > /etc/sudoers.d/tilty-service

#make sure users don't run git with sudo, thus breaking permissions, by adding /root/bin to the
#default sudo path and placing a git wrapper script there that checks if it's run as root
sed -i "s@secure_path=\"@secure_path=\"/root/bin:@g" /etc/sudoers
chmod +x /root/bin/git

# add some "How To" info to boot output
# Note, this code is also in /filesystem/home/pi/scripts/
sed -i 's@exit 0@@' /etc/rc.local
cat <<'EOT' >> /etc/rc.local
echo
echo "------------------------------------------------------------"
echo
echo "Test "
echo 
echo "------------------------------------------------------------"
echo
EOT

echo 'exit 0' >> /etc/rc.local

#unpack root in the end, so etc file are not overwritten, might need to add two roots int he future
unpack /filesystem/root /

#####################################################################
### setup services

### Disable GUI at start
systemctl_if_exists disable lightdm.service || true

update-rc.d change_password defaults
update-rc.d change_hostname defaults


### Tilty

if [ "$TILTYPI_INCLUDE_TILTY" == "yes" ]
then
  systemctl_if_exists enable tilty.service
else
  # let's remove the configs for system services we don't need
  rm /etc/systemd/system/tilty.service
fi

#cleanup
apt-get clean
apt-get autoremove -y
